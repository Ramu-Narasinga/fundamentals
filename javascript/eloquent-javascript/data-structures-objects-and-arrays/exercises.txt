THE SUME OF A RANGE:
    Write a range function that takes two arguments, start and end, and returns
    an array containing all the numbers from start up to (and including) end.
    Next, write a sum function that takes an array of numbers and returns the
    sum of these numbers

    jsFiddle-Link: https://jsfiddle.net/RamuNarasinga/rzdqah26/

REVERSING AN ARRAY:
    write two functions, reverseArray
    and reverseArrayInPlace. The first, reverseArray, takes an array as argument
    and produces a new array that has the same elements in the inverse order. The
    second, reverseArrayInPlace, does what the reverse method does: it modifies
    the array given as argument by reversing its elements. Neither may use the
    standard reverse method.

    jsFiddle-Link: https://jsfiddle.net/RamuNarasinga/ypwxg0me/

A LIST:

    let list = {
        value: 1,
        rest: {
        value: 2,
        rest: {
        value: 3,
        rest: null
        }
        }
        };
    A nice thing about lists is that they can share parts of their structure. For
    example, if I create two new values {value: 0, rest: list} and {value: -1,
    rest: list} (with list referring to the binding defined earlier), they are both
    independent lists, but they share the structure that makes up their last three
    elements. The original list is also still a valid three-element list.
    Write a function arrayToList that builds up a list structure like the one
    shown when given [1, 2, 3] as argument. Also write a listToArray function
    that produces an array from a list. Then add a helper function prepend, which
    takes an element and a list and creates a new list that adds the element to the
    front of the input list, and nth, which takes a list and a number and returns
    the element at the given position in the list (with zero referring to the first
    element) or undefined when there is no such element.
    If you havenâ€™t already, also write a recursive version of nth.

    jsFiddle-Link: https://jsfiddle.net/RamuNarasinga/xvdh6g12/

DEEPEQUAL:

    compares two objects and typeof null is object, checks if arguments passed are objects or strings and 
    returns true if all the object properties are equal in value

    jsFiddle-Link: https://jsfiddle.net/RamuNarasinga/hfkzq7m9/